function [randinds_verts,randinds_FC] = CBIG_SPGrad_set_downsample_params(num_vertices,sub_verts,sub_FC)

% [randinds_verts,randinds_FC] = CBIG_SPGrad_set_downsample_params(num_vertices,sub_verts,sub_FC)
%
% This script sets up the downsampling parameters for speeding up gradients.
%
% Input:
%     - num_vertices:
%       the number of total vertices in a mesh.
%
%     - sub_verts, sub_FC:
%       Without any speed-up subsampling, the RSFC similarity matrix is generated by
%       correlation between two NxN RSFC matrix (N is number of vertices). The dimensionality
%       of the RSFC similarity matrix is therefore NxN. In the speed-up version, we subsample 
%       the RSFC matrices, so that RSFC similarity matrix is generated by correlation between 
%       a NxN2 RSFC matrix and a N2xN1 RSFC matrix. The dimensionality of the RSFC similarity
%       matrix is therefore NxN1. N2 = #vertices/<sub_FC>, N1 = #vertices/<sub_verts>.
%       Higher value indicates stronger subsampling. 
%       For fsaverage6, we suggest user set: sub_FC = '100'; sub_verts = '200'.
%       For fs_LR_32k, we suggest user set: sub_FC = '10'; sub_verts = '200'.
%
% Output:
%     - randinds_verts, randinds_FC:
%       the random indices after downsampling
%
% Written by Ru(by) Kong and CBIG under MIT license: https://github.com/ThomasYeoLab/CBIG/blob/master/LICENSE.md

% set indices to pick up when subsample timecourse and FC matrix
% subsample FC matrix when calculate similarity matrix
num_sample_S = round(num_vertices / sub_verts);
if(sub_verts == 1)
    randinds_verts = 1 : num_vertices;
else
    randinds_verts = randperm(num_vertices);
    randinds_verts = randinds_verts(1: num_sample_S);
end; s = rng;

num_sample_FC = round(num_vertices / sub_FC);
if(sub_FC == 1)
    randinds_FC = 1: num_vertices;
else
    randinds_FC = randperm(num_vertices);
    randinds_FC = randinds_FC(1: num_sample_FC);
end; rng(s);