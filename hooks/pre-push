#!/bin/sh

###
# Ask the user whether he wants to continue or not
###
function push_or_not() {
    read -r -p "==> Do you still want to continue pushing current branch?[y/n]" response </dev/tty
    if [[ $response =~ ^([yY][eE][sS]|[yY])$ ]]; then
        echo "[PASSED]"
    else
        echo "[FAILED] Abort pushing."
        exit 1
    fi
}

######
# 1. (different files between upstream/develop and current branch)[.m, .sh, .csh]{utilities, stable_projects, data}
######
###
# Find the files that we want to check
###
curr_branch=$(git rev-parse --abbrev-ref HEAD)
files_to_be_checked=($(git diff --name-status upstream/develop..$curr_branch | awk '(($1 != "D") && ($1 != "U")) { print $2 }'))

EXTENSIONS_TO_CHECK=("m" "sh" "csh")
DIRECTORIES_TO_CHECK=("utilities" "stable_projects" "data")
EXCLUDED_FILES=("Surf2SurfGui.m" "Vol2SurfGui.m" "CBIG_tested_config.sh" "CBIG_tested_config.csh")

###
# Check whether function CBIG_xxx has been used in other functions
###
echo -e "\n==> [Check 1] Checking whether function CBIG_xxx has been used in other functions"
for file_path in "${files_to_be_checked[@]}"
do
    file_name=( $(basename "$file_path") )

    # check whether file should be excluded
    file_in_excluded=0
    for excluded_file in "${EXCLUDED_FILES[@]}"
    do
        if [[ $file_name == $excluded_file ]]; then
          file_in_excluded=1
          break
        fi
    done
    if [[ $file_in_excluded == 1 ]]; then
        continue
    fi

    for ext in "${EXTENSIONS_TO_CHECK[@]}"
    do
        for directory in "${DIRECTORIES_TO_CHECK[@]}"
        do
            if [[ $file_path == $directory/* ]] && [[ $file_name == *.$ext ]]; then
                echo -e "\n  ==> Checking $file_path"
                $CBIG_CODE_DIR/setup/check_function_format/CBIG_check_whether_function_used_in_other_functions_wrapper.sh \
                $file_path silent
            fi
        done
    done
done
echo "  [DONE]"

###
# comments about replacing function name
###
echo -e "\n==> [Useful function] Replace old function name with new function name"
echo "If you have renamed a function and want to change all instances of old function to the new function, you can use: "
echo "setup/replace_old_with_new_func_name/CBIG_replace_old_with_new_function_name_wrapper.sh"
echo ""

###
# Ask the user whether he wants to continue or not
###
push_or_not

######
# 2.  (different files between upstream/develop and current branch)[.m, .sh, .csh]
# {utilities, stable_projects, data, external_packages(exclude class folder @xxx)}
######
curr_branch=$(git rev-parse --abbrev-ref HEAD)
unset files_to_be_checked
files_to_be_checked=($(git diff --name-status upstream/develop..$curr_branch | awk '(($1 != "D") && ($1 != "U")) { print $2 }'))

EXTENSIONS_TO_CHECK=("m" "sh" "csh")
DIRECTORIES_TO_CHECK=("utilities" "stable_projects" "data" "external_packages")
EXCLUDED_FILES=("Surf2SurfGui.m" "Vol2SurfGui.m" "CBIG_tested_config.sh" "CBIG_tested_config.csh")

TARGET_DIRECTORIES=("utilities" "stable_projects" "data" "external_packages")

###
# Check whether function name xxx has conflict with other function names
###
echo -e "\n==> [Check 2] Checking whether function name xxx has conflict with other function names"
for file_path in "${files_to_be_checked[@]}"
do
    file_name=( $(basename "$file_path") )
    filename_with_conflict=0
    file_in_nondefault=0

    # check whether file should be excluded
    file_in_excluded=0
    for excluded_file in "${EXCLUDED_FILES[@]}"
    do
        if [[ $file_name == $excluded_file ]]; then
          file_in_excluded=1
          break
        fi
    done
    if [[ $file_in_excluded == 1 ]]; then
        continue
    fi

    for ext in "${EXTENSIONS_TO_CHECK[@]}"
    do
        for directory in "${DIRECTORIES_TO_CHECK[@]}"
        do
            if [[ $file_path == $directory/* && $file_name == *.$ext && \
                $file_path != *@* && $file_path != *matlab_bgl_mac64* ]]; then
                echo -e "\n  ==> Checking $file_path"
                # find all matches of filename
                all_matches=""
                i=0
                for target_dir in "${TARGET_DIRECTORIES[@]}"
                do
                    i=$((i+1))
                    matches=$(find $CBIG_CODE_DIR/$target_dir -type f -name "$file_name" ! \
                    -samefile $CBIG_CODE_DIR/$file_path ! -path "*/@*/*" ! -path "*/matlab_bgl_mac64/*")
                    if [[ $matches ]]; then
                        if [ $i == 1 ]; then
                            all_matches="$matches"
                        else
                            all_matches="$all_matches $matches"
                        fi
                    fi
                done

                if [[ ${all_matches} ]]; then
                    # check all matches
                    for match in "${all_matches[@]}"
                    do
                        if [[ $match != */non_default_packages/* ]] && [[ $file_path != */non_default_packages/* ]]; then
                            filename_with_conflict=1 
                        fi
                        if [[ $match == */non_default_packages/* ]] || [[ $file_path == */non_default_packages/* ]]; then
                            file_in_nondefault=1 
                        fi
                        echo "$match"
                    done
                    if [[ $filename_with_conflict == 1 ]]; then
                        echo "[FAILED] Abort pushing."
                        exit 1
                    fi
                    if [[ $file_in_nondefault == 1 ]]; then
                        echo "[WARNING] The user should discuss with the admin about how to handle the conflicts."
                        push_or_not
                    fi
                fi
            fi
        done
    done
done
echo "  [PASSED]"

######
# 3.  (folders of different files between upstream/develop and current branch)[@xxx]
# {utilities, stable_projects, data, external_packages}
######
curr_branch=$(git rev-parse --abbrev-ref HEAD)
unset files_to_be_checked
files_to_be_checked=($(git diff --name-status upstream/develop..$curr_branch | awk '(($1 != "D") && ($1 != "U")) { print $2 }'))

DIRECTORIES_TO_CHECK=("utilities" "stable_projects" "data" "external_packages")
TARGET_DIRECTORIES=("utilities" "stable_projects" "data" "external_packages")

# find the folders of comitted files
cnt=${#files_to_be_checked[@]}
for ((i=0;i<cnt;i++))
do
    folders_to_be_checked[i]=$(dirname ${files_to_be_checked[i]})
done
unique_folders_to_be_checked=($(echo ${folders_to_be_checked[@]} | tr ' ' '\n' | sort -u | tr '\n' ' '))

###
# Check whether class name @xxx has conflict with other class names
###
echo -e "\n==> [Check 3] Checking whether Matlab class name @xxx has conflict with other class names"
for folder_path in "${unique_folders_to_be_checked[@]}"
do
    folder_name=( $(basename "$folder_path") )
    classname_with_conflict=0
    class_in_nondefault=0

    for directory in "${DIRECTORIES_TO_CHECK[@]}"
    do
        if [[ $folder_path == $directory/* ]] && [[ $folder_name == @* ]]; then
            echo -e "\n  ==> Checking $folder_path"
            all_matches=""
            i=0
            for target_dir in "${TARGET_DIRECTORIES[@]}"
            do
                matches=$(find $CBIG_CODE_DIR/$target_dir -name "$folder_name" ! -samefile $CBIG_CODE_DIR/$folder_path) 
                if [[ ${matches} ]]; then
                    if [ $i == 1 ]; then
                        all_matches="$matches"
                    else
                        all_matches="$all_matches $matches"
                    fi
                fi
            done
            if [[ ${all_matches} ]]; then
                # check all matches
                for match in "${all_matches[@]}"
                do
                    if [[ $match != */non_default_packages/* ]] && [[ $folder_path != */non_default_packages/* ]]; then
                        classname_with_conflict=1 
                    fi
                    if [[ $match == */non_default_packages/* ]] || [[ $folder_path == */non_default_packages/* ]]; then
                        class_in_nondefault=1 
                    fi
                    echo "!!!Find conflict: $match"
                done
                if [[ $classname_with_conflict == 1 ]]; then
                    echo "[FAILED] Abort pushing."
                    exit 1
                fi
                if [[ $class_in_nondefault == 1 ]]; then
                    echo "[WARNING] The user should discuss with the admin about how to handle the conflicts."
                    push_or_not
                fi
            fi
        fi
    done
done
echo "  [PASSED]"

######
# 4.  (files in stable_projects/xxx/xxx (exclude Thomas, Alex, Gia, Xiuming, Raphael))[.m, .c, .cpp, .sh, .csh, .py, .pl, .r]
######
EXTENSIONS_TO_CHECK=("m" "c" "cpp" "sh" "csh" "py" "pl" "r")
EXCLUDED_DIRECTORIES=("Zhang2016_ADFactors")

echo -e "\n==> [Check 4] Checking stable_projects/xxx/xxx"
for project_path in $CBIG_CODE_DIR/stable_projects/*/*
do
    project_in_exclude_directory=0
    echo -e "\n===> Checking $project_path"
    all_with_valid_prefix=1
    for exclude_directory in "${EXCLUDED_DIRECTORIES[@]}" 
    do
        if [[ "$project_path" == */${exclude_directory} ]]; then
            project_in_exclude_directory=1
            break
        fi
    done
    if [[ $project_in_exclude_directory == 1 ]]; then
        continue
    fi

    cmd="files_in_project=(\$(find $project_path -type f"
    i=0
    for ext in ${EXTENSIONS_TO_CHECK[@]}
    do
        i=$((i+1))
        if [ $i == 1 ]; then
            cmd="$cmd -name \"*.$ext\""
        else
            cmd="$cmd -or -name \"*.$ext\""
        fi
    done
    cmd="$cmd))"
    eval $cmd
    ###
    # find the project name based on first file
    ###
    first_file="${files_in_project[0]}"
    first_filename=( $(basename "$first_file"))
    project_name=$(echo $first_filename | awk -F '_' '{print $2}')

    ###
    # check whether function name follows CBIG_<project_name>_xxx
    ###
    echo -e "\n====> Check whether all function names follow CBIG_<project_name>_xxx"
    i=0
    for file_path in "${files_in_project[@]}"
    do
        i=$((i+1))
        if [[ "$i" != "1" ]]; then
            filename=( $(basename "$file_path"))
            if [[ "$filename" != "CBIG_${project_name}_"* ]]; then
                echo "!!!Find problematic file: $file_path"
                all_with_valid_prefix=0
            fi
        fi
        
    done
    if [[ $all_with_valid_prefix == 0 ]]; then
        echo "[FAILED] Please make sure all scripts have filename CBIG_<project_name>_xxx"
        exit 1
    fi

    ###
    # check whether all projects have the config/CBIG_<project_name>_tested_config.sh
    ###
    echo -e "\n====> Check whether this project has config/CBIG_<project_name>_tested_config.sh"
    all_with_config=1
    if [[ -e $project_path/config/CBIG_${project_name}_tested_config.sh ]]; then
        secondline=`sed -n 2p $project_path/config/CBIG_${project_name}_tested_config.sh`
        if [[ "$secondline" != "# Last successfully run on"* ]]; then
            all_with_config=0
            echo "$project_path/config/CBIG_${project_name}_tested_config.sh does not have the time stamp"
        fi
    elif [[ -e $project_path/config/CBIG_${project_name}_tested_config.csh ]]; then
        secondline=`sed -n 2p $project_path/config/CBIG_${project_name}_tested_config.csh`
        if [[ "$secondline" != "# Last successfully run on"* ]]; then
            all_with_config=0
            echo "$project_path/config/CBIG_${project_name}_tested_config.csh does not have the time stamp"
        fi
    else
        echo "$project_path does not have a CBIG_${project_name}_tested_config file"
    fi
    if [ $all_with_config == 0 ]; then
        echo "    [FAILED] Stable_project $project_path does not have CBIG_${project_name}_tested_config files \
or these files do not have time stamp."
        echo "Please add CBIG_${project_name}_tested_config.sh or CBIG_${project_name}_tested_config.csh to \
$project_path/config/ manually"
        echo "Each stable project should contain a repo config file that was used when the project was last \
tested to work."
        echo "The second line of the config file should be a comment:"
        echo "# Last successfully run on <spelled out date to reduce confusion, e.g., Jan 7th, 2017>"
        exit 1
    fi

    ###
    # if there are matlab files in a project, check whether it has config/CBIG_<project_name>_tested_startup.m
    ###
    m_files=$(find $project_path -name "*.m")
    if [[ ${m_files} ]]; then
        echo -e "\n====> Check whether this project has config/CBIG_<project_name>_tested_startup.m"
        if [[ ! -e $project_path/config/CBIG_${project_name}_tested_startup.m ]]; then
            echo "    [FAILED] $project_path does not have a CBIG_${project_name}_tested_startup.m file"
            echo "Please add CBIG_${project_name}_tested_startup.m to $project_path/config/ manually"
            exit 1
        fi
        echo "    [PASSED]"
    fi

    ###
    # if there are python files in a project, check whether it has config/CBIG_<project_name>_python_env.txt
    ###
    py_files=$(find $project_path -name "*.py")
    if [[ ${py_files} ]]; then
        echo -e "\n====> Check whether this project has config/CBIG_<project_name>_python_env.txt"
        if [[ ! -e $project_path/config/CBIG_${project_name}_python_env.txt ]]; then
            echo "    [FAILED] $project_path does not have a CBIG_${project_name}_python_env.txt file"
            echo "Please add CBIG_${project_name}_python_env.txt to $project_path/config/ manually"
            exit 1
        fi
        echo "    [PASSED]"
    fi

    ###
    # check whether all projects have the unit_tests folder
    ###
    echo -e "\n====> Check whether this project has unit_tests folder"
    if [ ! -d "$project_path/unit_tests" ]; then
        echo "    [FAILED] $project_path does not have a unit_tests folder"
        echo "Please add a unit_tests folder under $project_path manually"
        exit 1
    fi
    echo "    [PASSED]"
 
done
exit 0



